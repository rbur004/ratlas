require 'ratlas'
include RAtlas
require 'complex' 
include Math
require 'testblas.rb'

class TestGetrs < TestBlas

	def initialize 
	  super
	  another_example
	  #solve_these
	  #puts
	 ibm_examples
  end
  
  def test_getrs(a, bx, ipiv, trans, bx_expected, error_bound, test_message)
    a.xgetrs!(bx, ipiv,  trans)
    #puts bx
    print_on_error( "xgetrs bx #{test_message}", bx, bx_expected, error_bound) 
  end

  def solve_these
    a = DoubleLapack[ [3,2,-1], [6,6,2], [3,-2,1] ]
    p = IntegerBlas.new(3)
    puts a
    puts p
    puts "********xgetrf!************"
    a.xgetrf!(p)
    puts a
    puts p

    puts "********xgetrs!************"
    b = DoubleLapack[1,12,11]
    r = a.xgetrs!(b, p, Blas::NoTrans)
    puts a
    puts b
    puts r
    
    puts "********xgetrs************"
    b = DoubleLapack[1,12,11]
    r = a.xgetrs(b, p, Blas::NoTrans)
    puts a
    puts b
    puts r
    
  end
  
  def ibm_examples
    #Example 1

    #    This example shows how to solve the system AX = equal to B, 
    #    where matrix A is the same matrix factored in the Example 1 for DGETRF.
    #    Call Statement and Input:

    #               TRANSA  N  NRHS  A  LDA  IPIV  BX  LDB  INFO
    #                 |     |    |   |   |     |   |    |    |
    #    CALL DGETRS('N' ,  9 ,  5 , A , 9 , IPIV, BX , 9 , INFO)

    #    IPVT     =  (9, 9, 9, 9, 9, 9, 9, 9, 9)
    
    #         | 1.0  1.2  1.4  1.6  1.8  2.0  2.2  2.4  2.6 |
    #         | 1.2  1.0  1.2  1.4  1.6  1.8  2.0  2.2  2.4 |
    #         | 1.4  1.2  1.0  1.2  1.4  1.6  1.8  2.0  2.2 |
    #         | 1.6  1.4  1.2  1.0  1.2  1.4  1.6  1.8  2.0 |
    # A    =  | 1.8  1.6  1.4  1.2  1.0  1.2  1.4  1.6  1.8 |
    #         | 2.0  1.8  1.6  1.4  1.2  1.0  1.2  1.4  1.6 |
    #         | 2.2  2.0  1.8  1.6  1.4  1.2  1.0  1.2  1.4 |
    #         | 2.4  2.2  2.0  1.8  1.6  1.4  1.2  1.0  1.2 |
    #         | 2.6  2.4  2.2  2.0  1.8  1.6  1.4  1.2  1.0 |
            
    #            | 93.0  186.0  279.0  372.0  465.0 |
    #            | 84.4  168.8  253.2  337.6  422.0 |
    #            | 76.6  153.2  229.8  306.4  383.0 |
    #            | 70.0  140.0  210.0  280.0  350.0 |
    #    BX   =  | 65.0  130.0  195.0  260.0  325.0 |
    #            | 62.0  124.0  186.0  248.0  310.0 |
    #            | 61.4  122.8  184.2  245.6  307.0 |
    #            | 63.6  127.2  190.8  254.4  318.0 |
    #            | 69.0  138.0  207.0  276.0  345.0 |

    #    Output:

    #            | 1.0   2.0   3.0   4.0   5.0 |
    #            | 2.0   4.0   6.0   8.0  10.0 |
    #            | 3.0   6.0   9.0  12.0  15.0 |
    #            | 4.0   8.0  12.0  16.0  20.0 |
    #    BX   =  | 5.0  10.0  15.0  20.0  25.0 |
    #            | 6.0  12.0  18.0  24.0  30.0 |
    #            | 7.0  14.0  21.0  28.0  35.0 |
    #            | 8.0  16.0  24.0  32.0  40.0 |
    #            | 9.0  18.0  27.0  36.0  45.0 |

    #    INFO =  0

    a = DoubleLapack[
            [ 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6 ],
            [ 1.2, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4 ],
            [ 1.4, 1.2, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2 ],
            [ 1.6, 1.4, 1.2, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0 ],
            [ 1.8, 1.6, 1.4, 1.2, 1.0, 1.2, 1.4, 1.6, 1.8 ],
            [ 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 1.2, 1.4, 1.6 ],
            [ 2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 1.2, 1.4 ],
            [ 2.4, 2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 1.2 ],
            [ 2.6, 2.4, 2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0 ],
          ]
          
     #puts a
          
      bx = DoubleLapack[
                      [ 93.0, 186.0, 279.0, 372.0, 465.0 ],
                      [ 84.4, 168.8, 253.2, 337.6, 422.0 ],
                      [ 76.6, 153.2, 229.8, 306.4, 383.0 ],
                      [ 70.0, 140.0, 210.0, 280.0, 350.0 ],
                      [ 65.0, 130.0, 195.0, 260.0, 325.0 ],
                      [ 62.0, 124.0, 186.0, 248.0, 310.0 ],
                      [ 61.4, 122.8, 184.2, 245.6, 307.0 ],
                      [ 63.6, 127.2, 190.8, 254.4, 318.0 ],
                      [ 69.0, 138.0, 207.0, 276.0, 345.0 ],
            ]
    #puts bx
    
    #ipiv = IntegerBlas[9, 9, 9, 9, 9, 9, 9, 9, 9]
    ipiv = IntegerBlas.new(9)
    a.xgetrf!(ipiv)    
    #puts ipiv
    
                    
      bx_expected = DoubleLapack.rows(
                        [ 1.0, 2.0, 3.0, 4.0, 5.0 ],
                        [ 2.0, 4.0, 6.0, 8.0, 10.0 ],
                        [ 3.0, 6.0, 9.0, 12.0, 15.0 ],
                        [ 4.0, 8.0, 12.0, 16.0, 20.0 ],
                        [ 5.0, 10.0, 15.0, 20.0, 25.0 ],
                        [ 6.0, 12.0, 18.0, 24.0, 30.0 ],
                        [ 7.0, 14.0, 21.0, 28.0, 35.0 ],
                        [ 8.0, 16.0, 24.0, 32.0, 40.0 ],
                        [ 9.0, 18.0, 27.0, 36.0, 45.0 ],
                      )

    test_getrs(a, bx, ipiv, Blas::NoTrans, bx_expected, 0.1, "IBM Example getrs-01")
    
    #Example 2

    #    This example shows how to solve the system AX = equal to b, where matrix A is the same matrix factored in the Example 2 for ZGETRF.
    #    Call Statement and Input:

    #               TRANS   N  NRHS  A  LDA  IPIV  BX  LDB  INFO
    #                 |     |    |   |   |     |   |    |     |
    #    CALL ZGETRS('N' ,  9 ,  5 , A , 9 , IPIV, BX , 9 , INFO)

    #    IPVT     =  (9, 9, 9, 9, 9, 9, 9, 9, 9)
    # A = [
    # [ (2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0)(4.0,-1.0)(4.4,-1.0)(4.8,-1.0)(5.2,-1.0) ]
    # [ (2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0)(4.0,-1.0)(4.4,-1.0)(4.8,-1.0) ]
    # [ (2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0)(4.0,-1.0)(4.4,-1.0) ]
    # [ (3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0)(4.0,-1.0) ]
    # [ (3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0) ]
    # [ (4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0) ]
    # [ (4.4,1.0)(4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0) ]
    # [ (4.8,1.0)(4.4,1.0)(4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0) ]
    # [ (5.2,1.0)(4.8,1.0)(4.4,1.0)(4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0) ]
    # ]                                                                                                   â”˜

    #            | (193.0,-10.6)  (200.0, 21.8)  (207.0, 54.2)  (214.0, 86.6)  (221.0,119.0) |
    #            | (173.8, -9.4)  (178.8, 20.2)  (183.8, 49.8)  (188.8, 79.4)  (193.8,109.0) |
    #            | (156.2, -5.4)  (159.2, 22.2)  (162.2, 49.8)  (165.2, 77.4)  (168.2,105.0) |
    #            | (141.0,  1.4)  (142.0, 27.8)  (143.0, 54.2)  (144.0, 80.6)  (145.0,107.0) |
    #    BX   =  | (129.0, 11.0)  (128.0, 37.0)  (127.0, 63.0)  (126.0, 89.0)  (125.0,115.0) |
    #            | (121.0, 23.4)  (118.0, 49.8)  (115.0, 76.2)  (112.0,102.6)  (109.0,129.0) |
    #            | (117.8, 38.6)  (112.8, 66.2)  (107.8, 93.8)  (102.8,121.4)   (97.8,149.0) |
    #            | (120.2, 56.6)  (113.2, 86.2)  (106.2,115.8)   (99.2,145.4)   (92.2,175.0) |
    #            | (129.0, 77.4)  (120.0,109.8)  (111.0,142.2)  (102.0,174.6)   (93.0,207.0) |

    #    Output:

    #            | (1.0,1.0)  (1.0,2.0)  (1.0,3.0) (1.0,4.0) (1.0,5.0) |
    #            | (2.0,1.0)  (2.0,2.0)  (2.0,3.0) (2.0,4.0) (2.0,5.0) |
    #            | (3.0,1.0)  (3.0,2.0)  (3.0,3.0) (3.0,4.0) (3.0,5.0) |
    #            | (4.0,1.0)  (4.0,2.0)  (4.0,3.0) (4.0,4.0) (4.0,5.0) |
    #    BX    = | (5.0,1.0)  (5.0,2.0)  (5.0,3.0) (5.0,4.0) (5.0,5.0) |
    #            | (6.0,1.0)  (6.0,2.0)  (6.0,3.0) (6.0,4.0) (6.0,5.0) |
    #            | (7.0,1.0)  (7.0,2.0)  (7.0,3.0) (7.0,4.0) (7.0,5.0) |
    #            | (8.0,1.0)  (8.0,2.0)  (8.0,3.0) (8.0,4.0) (8.0,5.0) |
    #            | (9.0,1.0)  (9.0,2.0)  (9.0,3.0) (9.0,4.0) (9.0,5.0) |

    #    INFO  = 0

    
  end
  
  def another_example
    a =  SingleLapack.rows(
            [1.80, 2.88, 2.05, -0.89],
            [5.25, -2.95, -0.95, -3.80],
            [1.58, -2.69, -2.90, -1.04],
            [-1.11, -0.66, -0.59, 0.80]
          )

    b = SingleLapack.rows(
          [9.52, 18.47],
          [24.35, 2.25],
          [0.77, -13.28],
          [-6.22, -6.21]
        )
    
    b_expected = SingleLapack.rows(
                   [1.0000, 3.0000],
                   [-1.0000, 2.0000],
                   [3.0000, 4.0000],
                   [-5.0000, 1.0000]
                )
                 
     ipiv = IntegerBlas.new(4)
     
     a.xgetrf!(ipiv)    #Note, this alters a & ipiv
    #puts ipiv
    #puts a,b,b_expected
    
    test_getrs(a, b, ipiv,  Blas::NoTrans, b_expected,  0.01, "Another Example")
    
  end
    
    
    
          
    
    
    
    
    
  
end

TestGetrs.new