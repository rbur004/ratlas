require 'ratlas'
include RAtlas
require 'complex' 
include Math
require 'testblas.rb'

class TestGetrf < TestBlas

	def initialize 
	  super
	  ibm_examples
	  #solve_these
  end
  
  def test_getrf(a, ipiv, ax_expected, ipiv_expected, error_bound, test_message)
    a.xgetrf!(ipiv)
    #puts a, ax_expected
    #puts
    #puts ipiv, ipiv_expected
    print_on_error( "xgetrf a #{test_message}", a, ax_expected, error_bound) 
    print_on_error( "xgetrf ipiv #{test_message}", ipiv, ipiv_expected, error_bound) 
  end

  def solve_these
    a = DoubleLapack[ [3,2,-1], [6,6,2], [3,-2,1] ]
    p = IntegerBlas.new(3)
    puts a
    puts p
    puts "********xgetrf!************"
    a.xgetrf!(p)
    puts a
    puts p
    
  end
  
  def ibm_examples
    #     Example 1
    # 
    #         This example shows a factorization of a real general matrix A of order 9.
    #         Call Statement and Input:
    # 
    #                      M   N   A  LDA  IPVT  INFO
    #                      |   |   |   |     |     |
    #         CALL DGETRF( 9 , 9 , A,  9 , IPVT, INFO )
    # 
    #                 | 1.0  1.2  1.4  1.6  1.8  2.0  2.2  2.4  2.6 |
    #                 | 1.2  1.0  1.2  1.4  1.6  1.8  2.0  2.2  2.4 |
    #                 | 1.4  1.2  1.0  1.2  1.4  1.6  1.8  2.0  2.2 |
    #                 | 1.6  1.4  1.2  1.0  1.2  1.4  1.6  1.8  2.0 |
    #         A    =  | 1.8  1.6  1.4  1.2  1.0  1.2  1.4  1.6  1.8 |
    #                 | 2.0  1.8  1.6  1.4  1.2  1.0  1.2  1.4  1.6 |
    #                 | 2.2  2.0  1.8  1.6  1.4  1.2  1.0  1.2  1.4 |
    #                 | 2.4  2.2  2.0  1.8  1.6  1.4  1.2  1.0  1.2 |
    #                 | 2.6  2.4  2.2  2.0  1.8  1.6  1.4  1.2  1.0 |
    # 
    #         Output:
    # 
    #                 | 2.6   2.4  2.2  2.0  1.8  1.6  1.4  1.2  1.0 |
    #                 | 0.4   0.3  0.6  0.8  1.1  1.4  1.7  1.9  2.2 |
    #                 | 0.5  -0.4  0.4  0.8  1.2  1.6  2.0  2.4  2.8 |
    #                 | 0.5  -0.3  0.0  0.4  0.8  1.2  1.6  2.0  2.4 |
    #         A    =  | 0.6  -0.3  0.0  0.0  0.4  0.8  1.2  1.6  2.0 |
    #                 | 0.7  -0.2  0.0  0.0  0.0  0.4  0.8  1.2  1.6 |
    #                 | 0.8  -0.2  0.0  0.0  0.0  0.0  0.4  0.8  1.2 |
    #                 | 0.8  -0.1  0.0  0.0  0.0  0.0  0.0  0.4  0.8 |
    #                 | 0.9  -0.1  0.0  0.0  0.0  0.0  0.0  0.0  0.4 |
    # 
    #         IPVT     =  (9, 9, 9, 9, 9, 9, 9, 9, 9)
    #         INFO     =  0
    # 
    a = DoubleLapack[
            [ 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6 ],
            [ 1.2, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4 ],
            [ 1.4, 1.2, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2 ],
            [ 1.6, 1.4, 1.2, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0 ],
            [ 1.8, 1.6, 1.4, 1.2, 1.0, 1.2, 1.4, 1.6, 1.8 ],
            [ 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 1.2, 1.4, 1.6 ],
            [ 2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 1.2, 1.4 ],
            [ 2.4, 2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 1.2 ],
            [ 2.6, 2.4, 2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0 ],
          ]
          
    ax_expected = DoubleLapack[
                      [ 2.6, 2.4, 2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0 ],
                      [ 0.4, 0.3, 0.6, 0.8, 1.1, 1.4, 1.7, 1.9, 2.2  ],
                      [ 0.5, -0.4, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8  ],
                      [ 0.5, -0.3, 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4  ],
                      [ 0.6, -0.3, 0.0, 0.0, 0.4, 0.8, 1.2, 1.6, 2.0  ],
                      [ 0.7, -0.2, 0.0, 0.0, 0.0, 0.4, 0.8, 1.2, 1.6  ],
                      [ 0.8, -0.2, 0.0, 0.0, 0.0, 0.0, 0.4, 0.8, 1.2  ],
                      [ 0.8, -0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.8  ],
                      [ 0.9, -0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4  ],
                    ]
                    
    ipiv = IntegerBlas.new(9)
    ipiv_expected = IntegerBlas[9, 9, 9, 9, 9, 9, 9, 9, 9]

    test_getrf(a, ipiv, ax_expected, ipiv_expected, 0.1, "IBM Example getrf-01")

    #     Example 2
    # 
    #         This example shows a factorization of a complex general matrix A of order 9.
    #         Call Statement and Input:
    # 
    #                      M   N   A  LDA  IPVT  INFO
    #                      |   |   |   |     |     |
    #         CALL ZGETRF( 9 , 9 , A,  9 , IPVT, INFO )
    # 
    # A = [
    # [ (2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0)(4.0,-1.0)(4.4,-1.0)(4.8,-1.0)(5.2,-1.0) ]
    # [ (2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0)(4.0,-1.0)(4.4,-1.0)(4.8,-1.0) ]
    # [ (2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0)(4.0,-1.0)(4.4,-1.0) ]
    # [ (3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0)(4.0,-1.0) ]
    # [ (3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0)(3.6,-1.0) ]
    # [ (4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0)(3.2,-1.0) ]
    # [ (4.4,1.0)(4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0)(2.8,-1.0) ]
    # [ (4.8,1.0)(4.4,1.0)(4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)(2.4,-1.0) ]
    # [ (5.2,1.0)(4.8,1.0)(4.4,1.0)(4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0) ]
    # ]                                                                                                   â”˜
    # 
    #         Output:
    # A    =  [
    # [(5.2,1.0)(4.8,1.0)(4.4,1.0)(4.0,1.0)(3.6,1.0)(3.2,1.0)(2.8,1.0)(2.4,1.0)(2.0,1.0)]
    # [(0.4,0.1)(0.6,-2.0)(1.1,-1.9)(1.7,-1.9)(2.3,-1.8)(2.8,-1.8)(3.4,-1.7)(3.9,-1.7)(4.5,-1.6)]
    # [(0.5,0.1)(0.0,-0.1)(0.6,-1.9)(1.2,-1.8)(1.8,-1.7)(2.5,-1.6)(3.1,-1.5)(3.7,-1.4)(4.3,-1.3)]
    # [(0.6,0.1)(0.0,-0.1)(-0.1,-0.1)(0.7,-1.9)(1.3,-1.7)(2.0,-1.6)(2.7,-1.5)(3.4,-1.4)(4.0,-1.2)]
    # [(0.6,0.1)(0.0,-0.1)(-0.1,-0.1)(-0.1,0.0)(0.7,-1.9)(1.5,-1.7)(2.2,-1.6)(2.9,-1.5)(3.7,-1.3)]
    # [(0.7,0.1)(0.0,-0.1)(0.0,0.0)(-0.1,0.0)(-0.1,0.0)(0.8,-1.9)(1.6,-1.8)(2.4,-1.6)(3.2,-1.5)]
    # [(0.8,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.8,-1.9)(1.7,-1.8)(2.5,-1.8)]
    # [(0.9,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.8,-2.0)(1.7,-1.9)]
    # [(0.9,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.0,0.0)(0.8,-2.0)]
    # ]
    # 
    #         IPVT     =  (9, 9, 9, 9, 9, 9, 9, 9, 9)
    #         INFO     =  0
    # 
    
    #     Example 3
    # 
    #         This example shows a factorization of a real general matrix A of order 9.
    #         Call Statement and Input:
    # 
    #                      M   N   A  LDA  IPVT  INFO
    #                      |   |   |   |     |     |
    #         CALL SGETRF( 9 , 9 , A,  9 , IPVT, INFO )
    # 
    #                 | 1.0  1.0  1.0  1.0  0.0  0.0   0.0   0.0   0.0 |
    #                 | 1.0  1.0  1.0  1.0  1.0  0.0   0.0   0.0   0.0 |
    #                 | 4.0  1.0  1.0  1.0  1.0  1.0   0.0   0.0   0.0 |
    #                 | 0.0  5.0  1.0  1.0  1.0  1.0   1.0   0.0   0.0 |
    #         A    =  | 0.0  0.0  6.0  1.0  1.0  1.0   1.0   1.0   0.0 |
    #                 | 0.0  0.0  0.0  7.0  1.0  1.0   1.0   1.0   1.0 |
    #                 | 0.0  0.0  0.0  0.0  8.0  1.0   1.0   1.0   1.0 |
    #                 | 0.0  0.0  0.0  0.0  0.0  9.0   1.0   1.0   1.0 |
    #                 | 0.0  0.0  0.0  0.0  0.0  0.0  10.0  11.0  12.0 |
    # 
    #         Output:
    # 
    #                 | 4.0000  1.0000  1.0000  1.0000   1.0000   1.0000   0.0000   0.0000   0.0000 |
    #                 | 0.0000  5.0000  1.0000  1.0000   1.0000   1.0000   1.0000   0.0000   0.0000 |
    #                 | 0.0000  0.0000  6.0000  1.0000   1.0000   1.0000   1.0000   1.0000   0.0000 |
    #                 | 0.0000  0.0000  0.0000  7.0000   1.0000   1.0000   1.0000   1.0000   1.0000 |
    #         A    =  | 0.0000  0.0000  0.0000  0.0000   8.0000   1.0000   1.0000   1.0000   1.0000 |
    #                 | 0.0000  0.0000  0.0000  0.0000   0.0000   9.0000   1.0000   1.0000   1.0000 |
    #                 | 0.0000  0.0000  0.0000  0.0000   0.0000   0.0000  10.0000  11.0000  12.0000 |
    #                 | 0.2500  0.1500  0.1000  0.0714   0.0536  -0.0694  -0.0306   0.1806   0.3111 |
    #                 | 0.2500  0.1500  0.1000  0.0714  -0.0714  -0.0556  -0.0194   0.9385  -0.0031 |
    # 
    #         IPVT     =  (3, 4, 5, 6, 7, 8, 9, 8, 9)
    
    a = SingleLapack[
        [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],
        [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ],
        [4.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 ],
        [0.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0 ],
        [0.0, 0.0, 6.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0 ],
        [0.0, 0.0, 0.0, 7.0, 1.0, 1.0, 1.0, 1.0, 1.0 ],
        [0.0, 0.0, 0.0, 0.0, 8.0, 1.0, 1.0, 1.0, 1.0 ],
        [0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 1.0, 1.0, 1.0 ],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 11.0, 12.0 ],
      ]

    ax_expected = SingleLapack[
      [ 4.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000 ],
      [ 0.0000, 5.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.0000, 0.0000 ],
      [ 0.0000, 0.0000, 6.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.0000 ],
      [ 0.0000, 0.0000, 0.0000, 7.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 ],
      [ 0.0000, 0.0000, 0.0000, 0.0000, 8.0000, 1.0000, 1.0000, 1.0000, 1.0000 ],
      [ 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 9.0000, 1.0000, 1.0000, 1.0000 ],
      [ 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 10.0000, 11.0000, 12.0000 ],
      [ 0.2500, 0.1500, 0.1000, 0.0714, 0.0536, -0.0694, -0.0306, 0.1806, 0.3111 ],
      [ 0.2500, 0.1500, 0.1000, 0.0714, -0.0714, -0.0556, -0.0194, 0.9385, -0.0031 ],
    ]
    
    ipiv = IntegerBlas.new(9)
    ipiv_expected = IntegerBlas[3, 4, 5, 6, 7, 8, 9, 8, 9]
    
    test_getrf(a, ipiv, ax_expected, ipiv_expected, 0.0001, "IBM Example getrf-03")
    
  end
  
end

TestGetrf.new