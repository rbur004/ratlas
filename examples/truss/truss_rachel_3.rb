require "../truss"

print "Tensions are positive, Compression negative\n"
print "0 point is floating end, Forces have opposite sign to members.\n"
print "Forces at supports can be added as Ay (floating end), Dx, Dy (fixed end). Set mount_forces to true\n\n"


print "Rachel 3 D box truss\n"

joints = [
 ['L01a', [28.801, 8.398, 0], [0.0, -0.259, 0.136]],
 ['L02a', [26.881, 7.838, 0], [0.0, -0.259, 0.136]],
 ['L03a', [24.960, 7.278, 0], [0.0, -0.259, 0.136]],
 ['L04a', [23.040, 6.719,  0.0], [0.0, -0.259, 0.136]],
 ['L05a', [21.120, 6.159,  0.0], [0.0, -0.259, 0.136]],
 ['L06a', [19.200, 5.599,  0.0], [0.0, -0.259, 0.136]],
 ['L07a', [17.280, 5.039, 0], [0.0, -0.259, 0.136]],
 ['L08a', [15.360, 4.479, 0], [0.0, -0.259, 0.136]],
 ['L09a',  [13.440, 3.919,  0], [0.0, -0.259, 0.136]],
 ['L10a',  [11.520, 3.359,  0], [0.0, -0.259, 0.136]],
 ['L11a',  [9.600,  2.799,  0], [0.0, -0.259, 0.136]],
 ['L12a',  [7.680,  2.240,  0], [0.0, -0.259, 0.136]],
 ['L13a',  [5.760,  1.680,  0], [0.0, -0.259, 0.136]],
 ['L14a',  [3.840,  1.120,  0], [0.0, -0.259, 0.136]],
 ['L15a',  [1.920,  0.560,  0], [0.0, -0.259, 0.136]],
 ['L16a',  [0.0,  0.0,  0.0], [0.0, -0.259, 0.136]],
 ['U01a', [29.038, 9.214, 0], [0.0, 0.259, 0.136]],
 ['U02a', [27.118, 8.654, 0], [0.0, 0.259, 0.136]],
 ['U03a', [25.198, 8.094, 0], [0.0, 0.259, 0.136]],
 ['U04a',  [23.278,  7.535,  0.0], [0.0, 0.259, 0.136]],
 ['U05a', [21.358, 6.975,  0.0], [0.0, 0.259, 0.136]],
 ['U06a', [19.438, 6.415,  0.0], [0.0, 0.259, 0.136]],
 ['U07a', [17.518, 5.855,  0.0], [3.072, -2.079, 0.136]],
 ['U08a', [15.598, 5.295, 0], [3.072, -2.079, 0.136]],
 ['U09a', [13.678, 4.735, 0], [0.0, 0.259, 0.136]],
 ['U10a',  [11.758, 4.175,  0], [0.0, 0.259, 0.136]],
 ['U11a',  [9.838, 3.615,  0], [0.0, 0.259, 0.136]],
 ['U12a',  [7.918,  3.056,  0], [0.0, 0.259, 0.136]],
 ['U13a',  [5.998,  2.496,  0], [0.0, 0.259, 0.136]],
 ['U14a',  [4.078,  1.936,  0], [0.0, 0.259, 0.136]],
 ['U15a',  [2.158,  1.376,  0], [0.0, 0.259, 0.136]],
 ['U16a',  [0.238,  0.816,  0], [0.0, 0.259, 0.136]],
 ['L01b', [28.801, 8.398, 1.0], [0.0, -0.259, 0.136]],
 ['L02b', [26.881, 7.838, 1.0], [0.0, -0.259, 0.136]],
 ['L03b', [24.960, 7.278, 1.0], [0.0, -0.259, 0.136]],
 ['L04b', [23.040, 6.719,  1.0], [0.0, -0.259, 0.136]],
 ['L05b', [21.120, 6.159,  1.0], [0.0, -0.259, 0.136]],
 ['L06b', [19.200, 5.599,  1.0], [0.0, -0.259, 0.136]],
 ['L07b', [17.280, 5.039, 1.0], [0.0, -0.259, 0.136]],
 ['L08b', [15.360, 4.479, 1.0], [0.0, -0.259, 0.136]],
 ['L09b',  [13.440, 3.919,  1.0], [0.0, -0.259, 0.136]],
 ['L10b',  [11.520, 3.359,  1.0], [0.0, -0.259, 0.136]],
 ['L11b',  [9.600,  2.799,  1.0], [0.0, -0.259, 0.136]],
 ['L12b',  [7.680,  2.240,  1.0], [0.0, -0.259, 0.136]],
 ['L13b',  [5.760,  1.680,  1.0], [0.0, -0.259, 0.136]],
 ['L14b',  [3.840,  1.120,  1.0], [0.0, -0.259, 0.136]],
 ['L15b',  [1.920,  0.560,  1.0], [0.0, -0.259, 0.136]],
 ['L16b',  [0.0,  0.0,  1.0], [0.0, -0.259, 0.136]],
 ['U01b', [29.038, 9.214, 1.0], [0.0, 0.259, 0.136]],
 ['U02b', [27.118, 8.654, 1.0], [0.0, 0.259, 0.136]],
 ['U03b', [25.198, 8.094, 1.0], [0.0, 0.259, 0.136]],
 ['U04b',  [23.278,  7.535,  1.0], [0.0, 0.259, 0.136]],
 ['U05b', [21.358, 6.975,  1.0], [0.0, 0.259, 0.136]],
 ['U06b', [19.438, 6.415,  1.0], [0.0, 0.259, 0.136]],
 ['U07b', [17.518, 5.855,  1.0], [3.072, -3.107, 0.136]],
 ['U08b', [15.598, 5.295, 1.0], [3.072, -3.107, 0.136]],
 ['U09b', [13.678, 4.735, 1.0], [0.0, 0.259, 0.136]],
 ['U10b',  [11.758, 4.175,  1.0], [0.0, 0.259, 0.136]],
 ['U11b',  [9.838, 3.615,  1.0], [0.0, 0.259, 0.136]],
 ['U12b',  [7.918,  3.056,  1.0], [0.0, 0.259, 0.136]],
 ['U13b',  [5.998,  2.496,  1.0], [0.0, 0.259, 0.136]],
 ['U14b',  [4.078,  1.936,  1.0], [0.0, 0.259, 0.136]],
 ['U15b',  [2.158,  1.376,  1.0], [0.0, 0.259, 0.136]],
 ['U16b',  [0.238,  0.816,  1.0], [0.0, 0.259, 0.136]],
]

members = []
m = -1
upper = 16 #offset to the stort of the top points
side_b = 32 #offset to start of the second side

(0..14).each do |i|
  j = i + upper #U01a
  k = i + side_b #L01b
  l = k + upper #U01b
  #print "#{i}, #{j}, #{k}, #{l}\n"
  #around
  members[m+=1] = [ "#{joints[i][0]}-#{joints[j][0]}", ["#{joints[i][0]}", "#{joints[j][0]}"] ]
  members[m+=1] = [ "#{joints[j][0]}-#{joints[l][0]}", ["#{joints[j][0]}", "#{joints[l][0]}"] ]
  members[m+=1] = [ "#{joints[l][0]}-#{joints[k][0]}", ["#{joints[l][0]}", "#{joints[k][0]}"] ]
  members[m+=1] = [ "#{joints[k][0]}-#{joints[i][0]}", ["#{joints[k][0]}", "#{joints[i][0]}"] ]
  #to next section
  members[m+=1] = [ "#{joints[i][0]}-#{joints[i+1][0]}", ["#{joints[i][0]}", "#{joints[i+1][0]}"] ]
  members[m+=1] = [ "#{joints[j][0]}-#{joints[j+1][0]}", ["#{joints[j][0]}", "#{joints[j+1][0]}"] ]
  members[m+=1] = [ "#{joints[k][0]}-#{joints[k+1][0]}", ["#{joints[k][0]}", "#{joints[k+1][0]}"] ]
  #print "#{m} #{members[m][0]} [ #{members[m][1][0]}, #{members[m][1][1]}]\n"
  #print "*******"
  members[m+=1] = [ "#{joints[l][0]}-#{joints[l+1][0]}", ["#{joints[l][0]}", "#{joints[l+1][0]}"] ]
  if(i%2 == 1)
    members[m+=1] = [ "#{joints[j][0]}-#{joints[i+1][0]}", ["#{joints[j][0]}", "#{joints[i+1][0]}"] ]
    members[m+=1] = [ "#{joints[k][0]}-#{joints[l+1][0]}", ["#{joints[k][0]}", "#{joints[l+1][0]}"] ]
    members[m+=1] = [ "#{joints[l][0]}-#{joints[j+1][0]}", ["#{joints[l][0]}", "#{joints[j+1][0]}"] ]
    members[m+=1] = [ "#{joints[i][0]}-#{joints[k+1][0]}", ["#{joints[i][0]}", "#{joints[k+1][0]}"] ]
  else
    members[m+=1] = [ "#{joints[i][0]}-#{joints[j+1][0]}", ["#{joints[i][0]}", "#{joints[j+1][0]}"] ]
    members[m+=1] = [ "#{joints[l][0]}-#{joints[k+1][0]}", ["#{joints[l][0]}", "#{joints[k+1][0]}"] ]
    members[m+=1] = [ "#{joints[j][0]}-#{joints[l+1][0]}", ["#{joints[j][0]}", "#{joints[l+1][0]}"] ]
    members[m+=1] = [ "#{joints[k][0]}-#{joints[i+1][0]}", ["#{joints[k][0]}", "#{joints[i+1][0]}"] ]
  end
end
i = 15
j = i + upper #U01a
k = i + side_b #L01b
l = k + upper #U01b
members[m+=1] = [ "#{joints[i][0]}-#{joints[k][0]}", ["#{joints[i][0]}", "#{joints[k][0]}"] ]
members[m+=1] = [ "#{joints[i][0]}-#{joints[j][0]}", ["#{joints[i][0]}", "#{joints[j][0]}"] ]
members[m+=1] = [ "#{joints[j][0]}-#{joints[l][0]}", ["#{joints[j][0]}", "#{joints[l][0]}"] ]
members[m+=1] = [ "#{joints[k][0]}-#{joints[l][0]}", ["#{joints[k][0]}", "#{joints[l][0]}"] ]

members[m+=1] = ['L01ax', ['L01a', 'Fx']] #roller
members[m+=1] = ['L01bx', ['L01b', 'Fx']] #roller

members[m+=1] = ['L16ax', ['L16a', 'Fx']] #fixed at the bottom
members[m+=1] = ['L16ay', ['L16a', 'Fy']] 
members[m+=1] = ['L16az', ['L16a', 'Fz']] 
members[m+=1] = ['L16bx', ['L16b', 'Fx']] #fixed at the bottom
members[m+=1] = ['L16by', ['L16b', 'Fy']] 
members[m+=1] = ['L16bz', ['L16b', 'Fz']] 

members.each { |m| print "#{m[0]} [ #{m[1][0]}, #{m[1][1]}]\n"}

truss = Truss.new( joints, members, true)
    
#print "Matrix = \n", truss.matrix_to_s, "\n"
v = truss.solve
print "Force Vector = \n", truss.joint_to_s, "\n"
#print "Solution Vector = \n", truss.solution_to_s, "\n"
print "Forces\n", truss.forces_to_s, "\n"
#print "Test = " , truss.test_solution, "\n"

